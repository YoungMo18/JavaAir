{"ast":null,"code":"// import React, { useState } from \"react\";\n// import { getDatabase, ref, get, set as firebaseSet } from \"firebase/database\";\n// import { useNavigate } from \"react-router-dom\";\n\n// export function SignUpForm() {\n//   const [userType, setUserType] = useState(\"\");\n//   const [username, setUsername] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [userButClass, setUserButClass] = useState(\"unclick-login-chooser\");\n//   const [workerButClass, setWorkerButClass] = useState(\"unclick-login-chooser\");\n//   const [isEmpty, setIsEmpty] = useState(false);\n//   const [userExist, setUserExist] = useState(false);\n//   const [createdAccount, setCreatedAccount] = useState(false);\n//   const navigate = useNavigate();\n\n//   const handleWorkerChange = () => {\n//     setUserType(\"worker\");\n//     setUserButClass(\"unclick-login-chooser\");\n//     setWorkerButClass(\"click-login-chooser\");\n//   };\n\n//   const handleUserChange = () => {\n//     setUserType(\"user\");\n//     setUserButClass(\"click-login-chooser\");\n//     setWorkerButClass(\"unclick-login-chooser\");\n//   };\n\n//   const handleUsernameChange = (event) => {\n//     setUsername(event.target.value);\n//   };\n\n//   const handlePasswordChange = (event) => {\n//     setPassword(event.target.value);\n//   };\n\n//   const checkEmpty = () =>\n//     userType === \"\" || username === \"\" || password === \"\";\n\n//   const checkDBEntries = () => {\n//     const db = getDatabase();\n//     const userRef = ref(db, `user/${username}`);\n\n//     return get(userRef)\n//       .then((snapshot) => {\n//         if (snapshot.exists()) {\n//           setUserExist(true);\n//           return true;\n//         } else {\n//           setUserExist(false);\n//           return false;\n//         }\n//       })\n//       .catch((error) => {\n//         console.log(error);\n//         return false;\n//       });\n//   };\n\n//   const inputDBEntries = () => {\n//     const db = getDatabase();\n//     const userRef = ref(db, `user/${username}`);\n//     firebaseSet(userRef, {\n//       userType: userType,\n//       password: password,\n//     })\n//       .then(() => console.log(\"data saved successfully!\"))\n//       .catch((err) => console.log(err));\n//     setCreatedAccount(true);\n//   };\n\n//   let handleSubmit = async (event) => {\n//     event.preventDefault();\n//     let empty = checkEmpty();\n//     if (!empty) {\n//       setIsEmpty(false);\n//       try {\n//         let userExist = await checkDBEntries();\n//         if (!userExist) {\n//           await inputDBEntries();\n//           setTimeout(() => {\n//             navigate(\"/login\");\n//           }, 1800);\n//         } else {\n//           console.log(\"User already exists!\");\n//         }\n//       } catch (err) {\n//         console.log(err);\n//       }\n//     } else {\n//       console.log(\"empty\");\n//       setIsEmpty(true);\n//     }\n//   };\n\n//   return (\n//     <div className=\"signup-form\">\n//       <article className=\"signup-chooser\">\n//         <button onClick={handleWorkerChange} className={workerButClass}>\n//           Worker\n//         </button>\n//         <button onClick={handleUserChange} className={userButClass}>\n//           User\n//         </button>\n//       </article>\n//       <article class=\"signup-container\">\n//         <section className=\"signup-window\">\n//           <form id=\"signup-form\" method=\"post\">\n//             <label for=\"uname\">\n//               <b>Username</b>\n//             </label>\n//             <input\n//               type=\"text\"\n//               name=\"username\"\n//               id=\"unameSign\"\n//               placeholder=\"Enter your username\"\n//               onChange={handleUsernameChange}\n//               required\n//             />\n//             <label for=\"psw\">\n//               <b>Password</b>\n//             </label>\n//             <input\n//               type=\"password\"\n//               name=\"password\"\n//               id=\"pswSign\"\n//               placeholder=\"Enter your password\"\n//               onChange={handlePasswordChange}\n//               required\n//             />\n//             <button id=\"signup-btn\" onClick={handleSubmit}>\n//               Sign Up\n//             </button>\n//           </form>\n//           {isEmpty && <div className=\"error-msg\">Form is incomplete</div>}\n//           {userExist && <div className=\"error-msg\">User already exist</div>}\n//           {createdAccount && (\n//             <div className=\"success-msg\">Success!!! Redirecting to login</div>\n//           )}\n//         </section>\n//       </article>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["/Users/muhammadputra/Desktop/JavaAir/frontend/src/components/form/SignUpForm.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import { getDatabase, ref, get, set as firebaseSet } from \"firebase/database\";\n// import { useNavigate } from \"react-router-dom\";\n\n// export function SignUpForm() {\n//   const [userType, setUserType] = useState(\"\");\n//   const [username, setUsername] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [userButClass, setUserButClass] = useState(\"unclick-login-chooser\");\n//   const [workerButClass, setWorkerButClass] = useState(\"unclick-login-chooser\");\n//   const [isEmpty, setIsEmpty] = useState(false);\n//   const [userExist, setUserExist] = useState(false);\n//   const [createdAccount, setCreatedAccount] = useState(false);\n//   const navigate = useNavigate();\n\n//   const handleWorkerChange = () => {\n//     setUserType(\"worker\");\n//     setUserButClass(\"unclick-login-chooser\");\n//     setWorkerButClass(\"click-login-chooser\");\n//   };\n\n//   const handleUserChange = () => {\n//     setUserType(\"user\");\n//     setUserButClass(\"click-login-chooser\");\n//     setWorkerButClass(\"unclick-login-chooser\");\n//   };\n\n//   const handleUsernameChange = (event) => {\n//     setUsername(event.target.value);\n//   };\n\n//   const handlePasswordChange = (event) => {\n//     setPassword(event.target.value);\n//   };\n\n//   const checkEmpty = () =>\n//     userType === \"\" || username === \"\" || password === \"\";\n\n//   const checkDBEntries = () => {\n//     const db = getDatabase();\n//     const userRef = ref(db, `user/${username}`);\n\n//     return get(userRef)\n//       .then((snapshot) => {\n//         if (snapshot.exists()) {\n//           setUserExist(true);\n//           return true;\n//         } else {\n//           setUserExist(false);\n//           return false;\n//         }\n//       })\n//       .catch((error) => {\n//         console.log(error);\n//         return false;\n//       });\n//   };\n\n//   const inputDBEntries = () => {\n//     const db = getDatabase();\n//     const userRef = ref(db, `user/${username}`);\n//     firebaseSet(userRef, {\n//       userType: userType,\n//       password: password,\n//     })\n//       .then(() => console.log(\"data saved successfully!\"))\n//       .catch((err) => console.log(err));\n//     setCreatedAccount(true);\n//   };\n\n//   let handleSubmit = async (event) => {\n//     event.preventDefault();\n//     let empty = checkEmpty();\n//     if (!empty) {\n//       setIsEmpty(false);\n//       try {\n//         let userExist = await checkDBEntries();\n//         if (!userExist) {\n//           await inputDBEntries();\n//           setTimeout(() => {\n//             navigate(\"/login\");\n//           }, 1800);\n//         } else {\n//           console.log(\"User already exists!\");\n//         }\n//       } catch (err) {\n//         console.log(err);\n//       }\n//     } else {\n//       console.log(\"empty\");\n//       setIsEmpty(true);\n//     }\n//   };\n\n//   return (\n//     <div className=\"signup-form\">\n//       <article className=\"signup-chooser\">\n//         <button onClick={handleWorkerChange} className={workerButClass}>\n//           Worker\n//         </button>\n//         <button onClick={handleUserChange} className={userButClass}>\n//           User\n//         </button>\n//       </article>\n//       <article class=\"signup-container\">\n//         <section className=\"signup-window\">\n//           <form id=\"signup-form\" method=\"post\">\n//             <label for=\"uname\">\n//               <b>Username</b>\n//             </label>\n//             <input\n//               type=\"text\"\n//               name=\"username\"\n//               id=\"unameSign\"\n//               placeholder=\"Enter your username\"\n//               onChange={handleUsernameChange}\n//               required\n//             />\n//             <label for=\"psw\">\n//               <b>Password</b>\n//             </label>\n//             <input\n//               type=\"password\"\n//               name=\"password\"\n//               id=\"pswSign\"\n//               placeholder=\"Enter your password\"\n//               onChange={handlePasswordChange}\n//               required\n//             />\n//             <button id=\"signup-btn\" onClick={handleSubmit}>\n//               Sign Up\n//             </button>\n//           </form>\n//           {isEmpty && <div className=\"error-msg\">Form is incomplete</div>}\n//           {userExist && <div className=\"error-msg\">User already exist</div>}\n//           {createdAccount && (\n//             <div className=\"success-msg\">Success!!! Redirecting to login</div>\n//           )}\n//         </section>\n//       </article>\n//     </div>\n//   );\n// }\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}