{"ast":null,"code":"// import React, { useState } from \"react\";\n// import { getDatabase, ref, get, set as firebaseSet } from \"firebase/database\";\n// import { useNavigate } from \"react-router-dom\";\n// export function SignUpForm() {\n//   const [userType, setUserType] = useState(\"\");\n//   const [username, setUsername] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [userButClass, setUserButClass] = useState(\"unclick-login-chooser\");\n//   const [workerButClass, setWorkerButClass] = useState(\"unclick-login-chooser\");\n//   const [isEmpty, setIsEmpty] = useState(false);\n//   const [userExist, setUserExist] = useState(false);\n//   const [createdAccount, setCreatedAccount] = useState(false);\n//   const navigate = useNavigate();\n//   const handleWorkerChange = () => {\n//     setUserType(\"worker\");\n//     setUserButClass(\"unclick-login-chooser\");\n//     setWorkerButClass(\"click-login-chooser\");\n//   };\n//   const handleUserChange = () => {\n//     setUserType(\"user\");\n//     setUserButClass(\"click-login-chooser\");\n//     setWorkerButClass(\"unclick-login-chooser\");\n//   };\n//   const handleUsernameChange = (event) => {\n//     setUsername(event.target.value);\n//   };\n//   const handlePasswordChange = (event) => {\n//     setPassword(event.target.value);\n//   };\n//   const checkEmpty = () =>\n//     userType === \"\" || username === \"\" || password === \"\";\n//   const checkDBEntries = () => {\n//     const db = getDatabase();\n//     const userRef = ref(db, `user/${username}`);\n//     return get(userRef)\n//       .then((snapshot) => {\n//         if (snapshot.exists()) {\n//           setUserExist(true);\n//           return true;\n//         } else {\n//           setUserExist(false);\n//           return false;\n//         }\n//       })\n//       .catch((error) => {\n//         console.log(error);\n//         return false;\n//       });\n//   };\n//   const inputDBEntries = () => {\n//     const db = getDatabase();\n//     const userRef = ref(db, `user/${username}`);\n//     firebaseSet(userRef, {\n//       userType: userType,\n//       password: password,\n//     })\n//       .then(() => console.log(\"data saved successfully!\"))\n//       .catch((err) => console.log(err));\n//     setCreatedAccount(true);\n//   };\n//   let handleSubmit = async (event) => {\n//     event.preventDefault();\n//     let empty = checkEmpty();\n//     if (!empty) {\n//       setIsEmpty(false);\n//       try {\n//         let userExist = await checkDBEntries();\n//         if (!userExist) {\n//           await inputDBEntries();\n//           setTimeout(() => {\n//             navigate(\"/login\");\n//           }, 1800);\n//         } else {\n//           console.log(\"User already exists!\");\n//         }\n//       } catch (err) {\n//         console.log(err);\n//       }\n//     } else {\n//       console.log(\"empty\");\n//       setIsEmpty(true);\n//     }\n//   };\n//   return (\n//     <div className=\"signup-form\">\n//       <article className=\"signup-chooser\">\n//         <button onClick={handleWorkerChange} className={workerButClass}>\n//           Worker\n//         </button>\n//         <button onClick={handleUserChange} className={userButClass}>\n//           User\n//         </button>\n//       </article>\n//       <article class=\"signup-container\">\n//         <section className=\"signup-window\">\n//           <form id=\"signup-form\" method=\"post\">\n//             <label for=\"uname\">\n//               <b>Username</b>\n//             </label>\n//             <input\n//               type=\"text\"\n//               name=\"username\"\n//               id=\"unameSign\"\n//               placeholder=\"Enter your username\"\n//               onChange={handleUsernameChange}\n//               required\n//             />\n//             <label for=\"psw\">\n//               <b>Password</b>\n//             </label>\n//             <input\n//               type=\"password\"\n//               name=\"password\"\n//               id=\"pswSign\"\n//               placeholder=\"Enter your password\"\n//               onChange={handlePasswordChange}\n//               required\n//             />\n//             <button id=\"signup-btn\" onClick={handleSubmit}>\n//               Sign Up\n//             </button>\n//           </form>\n//           {isEmpty && <div className=\"error-msg\">Form is incomplete</div>}\n//           {userExist && <div className=\"error-msg\">User already exist</div>}\n//           {createdAccount && (\n//             <div className=\"success-msg\">Success!!! Redirecting to login</div>\n//           )}\n//         </section>\n//       </article>\n//     </div>\n//   );\n// }\nimport React,{useState}from\"react\";import{useNavigate}from\"react-router-dom\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export function SignUpForm(){const[userType,setUserType]=useState(\"\");const[username,setUsername]=useState(\"\");const[password,setPassword]=useState(\"\");const[userButClass,setUserButClass]=useState(\"unclick-login-chooser\");const[workerButClass,setWorkerButClass]=useState(\"unclick-login-chooser\");const[isEmpty,setIsEmpty]=useState(false);const[userExist,setUserExist]=useState(false);const[createdAccount,setCreatedAccount]=useState(false);const navigate=useNavigate();const handleWorkerChange=()=>{setUserType(\"worker\");setUserButClass(\"unclick-login-chooser\");setWorkerButClass(\"click-login-chooser\");};const handleUserChange=()=>{setUserType(\"user\");setUserButClass(\"click-login-chooser\");setWorkerButClass(\"unclick-login-chooser\");};const handleUsernameChange=event=>{setUsername(event.target.value);};const handlePasswordChange=event=>{setPassword(event.target.value);};const checkEmpty=()=>userType===\"\"||username===\"\"||password===\"\";const handleSubmit=async event=>{event.preventDefault();if(checkEmpty()){setIsEmpty(true);return;}setIsEmpty(false);try{const response=await fetch(\"/api/v3/users/signup\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({username,password,userType})});if(response.ok){setCreatedAccount(true);setTimeout(()=>{navigate(\"/login\");},1800);}else{const data=await response.json();if(data.message===\"User already exists\"){setUserExist(true);}}}catch(err){console.error(\"Error during signup:\",err);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"signup-form\",children:[/*#__PURE__*/_jsxs(\"article\",{className:\"signup-chooser\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:handleWorkerChange,className:workerButClass,children:\"Worker\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleUserChange,className:userButClass,children:\"User\"})]}),/*#__PURE__*/_jsx(\"article\",{className:\"signup-container\",children:/*#__PURE__*/_jsxs(\"section\",{className:\"signup-window\",children:[/*#__PURE__*/_jsxs(\"form\",{id:\"signup-form\",method:\"post\",onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"uname\",children:/*#__PURE__*/_jsx(\"b\",{children:\"Username\"})}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"username\",id:\"unameSign\",placeholder:\"Enter your username\",onChange:handleUsernameChange,required:true}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"psw\",children:/*#__PURE__*/_jsx(\"b\",{children:\"Password\"})}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",name:\"password\",id:\"pswSign\",placeholder:\"Enter your password\",onChange:handlePasswordChange,required:true}),/*#__PURE__*/_jsx(\"button\",{id:\"signup-btn\",type:\"submit\",children:\"Sign Up\"})]}),isEmpty&&/*#__PURE__*/_jsx(\"div\",{className:\"error-msg\",children:\"Form is incomplete\"}),userExist&&/*#__PURE__*/_jsx(\"div\",{className:\"error-msg\",children:\"User already exists\"}),createdAccount&&/*#__PURE__*/_jsx(\"div\",{className:\"success-msg\",children:\"Success!!! Redirecting to login\"})]})})]});}","map":{"version":3,"names":["React","useState","useNavigate","jsx","_jsx","jsxs","_jsxs","SignUpForm","userType","setUserType","username","setUsername","password","setPassword","userButClass","setUserButClass","workerButClass","setWorkerButClass","isEmpty","setIsEmpty","userExist","setUserExist","createdAccount","setCreatedAccount","navigate","handleWorkerChange","handleUserChange","handleUsernameChange","event","target","value","handlePasswordChange","checkEmpty","handleSubmit","preventDefault","response","fetch","method","headers","body","JSON","stringify","ok","setTimeout","data","json","message","err","console","error","className","children","onClick","id","onSubmit","htmlFor","type","name","placeholder","onChange","required"],"sources":["/Users/muhammadputra/Desktop/JavaAir/frontend/src/components/form/SignUpForm.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import { getDatabase, ref, get, set as firebaseSet } from \"firebase/database\";\n// import { useNavigate } from \"react-router-dom\";\n\n// export function SignUpForm() {\n//   const [userType, setUserType] = useState(\"\");\n//   const [username, setUsername] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [userButClass, setUserButClass] = useState(\"unclick-login-chooser\");\n//   const [workerButClass, setWorkerButClass] = useState(\"unclick-login-chooser\");\n//   const [isEmpty, setIsEmpty] = useState(false);\n//   const [userExist, setUserExist] = useState(false);\n//   const [createdAccount, setCreatedAccount] = useState(false);\n//   const navigate = useNavigate();\n\n//   const handleWorkerChange = () => {\n//     setUserType(\"worker\");\n//     setUserButClass(\"unclick-login-chooser\");\n//     setWorkerButClass(\"click-login-chooser\");\n//   };\n\n//   const handleUserChange = () => {\n//     setUserType(\"user\");\n//     setUserButClass(\"click-login-chooser\");\n//     setWorkerButClass(\"unclick-login-chooser\");\n//   };\n\n//   const handleUsernameChange = (event) => {\n//     setUsername(event.target.value);\n//   };\n\n//   const handlePasswordChange = (event) => {\n//     setPassword(event.target.value);\n//   };\n\n//   const checkEmpty = () =>\n//     userType === \"\" || username === \"\" || password === \"\";\n\n//   const checkDBEntries = () => {\n//     const db = getDatabase();\n//     const userRef = ref(db, `user/${username}`);\n\n//     return get(userRef)\n//       .then((snapshot) => {\n//         if (snapshot.exists()) {\n//           setUserExist(true);\n//           return true;\n//         } else {\n//           setUserExist(false);\n//           return false;\n//         }\n//       })\n//       .catch((error) => {\n//         console.log(error);\n//         return false;\n//       });\n//   };\n\n//   const inputDBEntries = () => {\n//     const db = getDatabase();\n//     const userRef = ref(db, `user/${username}`);\n//     firebaseSet(userRef, {\n//       userType: userType,\n//       password: password,\n//     })\n//       .then(() => console.log(\"data saved successfully!\"))\n//       .catch((err) => console.log(err));\n//     setCreatedAccount(true);\n//   };\n\n//   let handleSubmit = async (event) => {\n//     event.preventDefault();\n//     let empty = checkEmpty();\n//     if (!empty) {\n//       setIsEmpty(false);\n//       try {\n//         let userExist = await checkDBEntries();\n//         if (!userExist) {\n//           await inputDBEntries();\n//           setTimeout(() => {\n//             navigate(\"/login\");\n//           }, 1800);\n//         } else {\n//           console.log(\"User already exists!\");\n//         }\n//       } catch (err) {\n//         console.log(err);\n//       }\n//     } else {\n//       console.log(\"empty\");\n//       setIsEmpty(true);\n//     }\n//   };\n\n//   return (\n//     <div className=\"signup-form\">\n//       <article className=\"signup-chooser\">\n//         <button onClick={handleWorkerChange} className={workerButClass}>\n//           Worker\n//         </button>\n//         <button onClick={handleUserChange} className={userButClass}>\n//           User\n//         </button>\n//       </article>\n//       <article class=\"signup-container\">\n//         <section className=\"signup-window\">\n//           <form id=\"signup-form\" method=\"post\">\n//             <label for=\"uname\">\n//               <b>Username</b>\n//             </label>\n//             <input\n//               type=\"text\"\n//               name=\"username\"\n//               id=\"unameSign\"\n//               placeholder=\"Enter your username\"\n//               onChange={handleUsernameChange}\n//               required\n//             />\n//             <label for=\"psw\">\n//               <b>Password</b>\n//             </label>\n//             <input\n//               type=\"password\"\n//               name=\"password\"\n//               id=\"pswSign\"\n//               placeholder=\"Enter your password\"\n//               onChange={handlePasswordChange}\n//               required\n//             />\n//             <button id=\"signup-btn\" onClick={handleSubmit}>\n//               Sign Up\n//             </button>\n//           </form>\n//           {isEmpty && <div className=\"error-msg\">Form is incomplete</div>}\n//           {userExist && <div className=\"error-msg\">User already exist</div>}\n//           {createdAccount && (\n//             <div className=\"success-msg\">Success!!! Redirecting to login</div>\n//           )}\n//         </section>\n//       </article>\n//     </div>\n//   );\n// }\n\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport function SignUpForm() {\n  const [userType, setUserType] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [userButClass, setUserButClass] = useState(\"unclick-login-chooser\");\n  const [workerButClass, setWorkerButClass] = useState(\"unclick-login-chooser\");\n  const [isEmpty, setIsEmpty] = useState(false);\n  const [userExist, setUserExist] = useState(false);\n  const [createdAccount, setCreatedAccount] = useState(false);\n  const navigate = useNavigate();\n\n  const handleWorkerChange = () => {\n    setUserType(\"worker\");\n    setUserButClass(\"unclick-login-chooser\");\n    setWorkerButClass(\"click-login-chooser\");\n  };\n\n  const handleUserChange = () => {\n    setUserType(\"user\");\n    setUserButClass(\"click-login-chooser\");\n    setWorkerButClass(\"unclick-login-chooser\");\n  };\n\n  const handleUsernameChange = (event) => {\n    setUsername(event.target.value);\n  };\n\n  const handlePasswordChange = (event) => {\n    setPassword(event.target.value);\n  };\n\n  const checkEmpty = () =>\n    userType === \"\" || username === \"\" || password === \"\";\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    if (checkEmpty()) {\n      setIsEmpty(true);\n      return;\n    }\n    setIsEmpty(false);\n\n    try {\n      const response = await fetch(\"/api/v3/users/signup\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ username, password, userType }),\n      });\n\n      if (response.ok) {\n        setCreatedAccount(true);\n        setTimeout(() => {\n          navigate(\"/login\");\n        }, 1800);\n      } else {\n        const data = await response.json();\n        if (data.message === \"User already exists\") {\n          setUserExist(true);\n        }\n      }\n    } catch (err) {\n      console.error(\"Error during signup:\", err);\n    }\n  };\n\n  return (\n    <div className=\"signup-form\">\n      <article className=\"signup-chooser\">\n        <button onClick={handleWorkerChange} className={workerButClass}>\n          Worker\n        </button>\n        <button onClick={handleUserChange} className={userButClass}>\n          User\n        </button>\n      </article>\n      <article className=\"signup-container\">\n        <section className=\"signup-window\">\n          <form id=\"signup-form\" method=\"post\" onSubmit={handleSubmit}>\n            <label htmlFor=\"uname\">\n              <b>Username</b>\n            </label>\n            <input\n              type=\"text\"\n              name=\"username\"\n              id=\"unameSign\"\n              placeholder=\"Enter your username\"\n              onChange={handleUsernameChange}\n              required\n            />\n            <label htmlFor=\"psw\">\n              <b>Password</b>\n            </label>\n            <input\n              type=\"password\"\n              name=\"password\"\n              id=\"pswSign\"\n              placeholder=\"Enter your password\"\n              onChange={handlePasswordChange}\n              required\n            />\n            <button id=\"signup-btn\" type=\"submit\">\n              Sign Up\n            </button>\n          </form>\n          {isEmpty && <div className=\"error-msg\">Form is incomplete</div>}\n          {userExist && <div className=\"error-msg\">User already exists</div>}\n          {createdAccount && (\n            <div className=\"success-msg\">Success!!! Redirecting to login</div>\n          )}\n        </section>\n      </article>\n    </div>\n  );\n}\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}